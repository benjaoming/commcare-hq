#! /bin/bash
# CommCare HQ docker helper

function usage() {
    case $1 in
        hqtest)
            echo "Manage test containers"
            echo ""
            echo "$0 hqtest [COMMAND]"
            echo ""
            echo "OPTIONS are passed to the selected test runner."
            echo ""
            echo "Examples:"
            echo ""
            echo "  # list test containers"
            echo "  $0 hqtest ps"
            echo ""
            echo "  # stop test containers"
            echo "  $0 hqtest stop"
            echo ""
            echo "  # remove all test containers and volumes"
            echo "  $0 hqtest teardown"
            echo ""
            ;;
        rebuild)
            echo "Stop, remove, and rebuild image(s)"
            echo ""
            echo "$0 rebuild [SERVICES...]"
            echo ""
            echo "Existing local images are removed before rebuilding."
            echo ""
            ;;
        teardown)
            echo "Remove all containers, images and volumes"
            echo ""
            ;;
        *)
            echo "Manage docker services for CommCare HQ"
            echo ""
            echo "$0 COMMAND [OPTIONS]"
            echo ""
            echo "$0 help COMMAND"
            echo ""
            echo "Commands:"
            echo "  help        Get help on a command"
            echo "  hqtest      Manage test containers"
            echo "  rebuild     Stop, remove, and rebuild image(s)"
            echo "  teardown    Remove all containers, images and volumes"
            echo ""
            echo "All other commands are passed directly to docker-compose."
            echo ""
            echo "Examples:"
            echo ""
            echo "  # list service containers"
            echo "  $0 ps"
            echo ""
            echo "  # stop service containers"
            echo "  $0 stop"
            echo ""
            echo "  # run services in background"
            echo "  $0 up -d"
            echo ""
            ;;
    esac
    exit
}

case "$(uname -m)" in
    x86_64)
        arch_suffix='x86'
        ;;
    arm64)
        arch_suffix='arm64'
        ;;
    *)
        arch_suffix='x86'
        echo "WARNING: unrecognized system architecture ($(uname -m)), falling back to ${arch_suffix}" >&2
        ;;
esac
export COMPOSE_ARCH="hq-compose-arch-${arch_suffix}.yml"

CMD="$1"
shift
if [ "$CMD" == "test" ]; then
    echo "ERROR Tests are no longer run in a docker container."
    echo "Use ./manage.py test ..."
    exit 1
elif [ "$CMD" == "hqtest" ]; then
    CMD="$1"
    shift
    if [ -z "$CMD" ]; then
        CMD=help
    fi
    export COMPOSE_PROJECT_NAME=hqtest
    if [ -n "$TRAVIS_BUILD_DIR" ]; then
        export VOLUME_PREFIX="$TRAVIS_BUILD_DIR/docker-volumes/"
    else
        # Since we don't want to persist tests data beyond the lifecycle of the container
        # we don't want to specify a volume path. Prior to v2 of docker compse this wasn't
        # an issue since not specifying a path resulted in using named volumes which docker
        # would dynamically create. From >v2 docker compose requires declaring named volumes
        # in the compose file which means we can't use the same compose file using named volumes
        # in one instance and unnamed in another.
        # The solution was to specify a blank path in tests rather than a volume name. Docker compose
        # will then create the volume as before.
        # Making this work relies on a exploiting variable substitution:
        #     ${VARIABLE-default} evaluates to default only if VARIABLE is unset in the environment.
        # In normal operations we set VOLUME_PREFIX and leave BLANK_IF_TESTS unset which will cause
        # this "${BLANK_IF_TESTS-vol1:}" to evaluate to "vol1:" (note the ':'). During tests we set "BLANK_IF_TESTS"
        # to an empty string and the result of the above expression is an empty string.
        # Note: I also tried using the long syntax for volume specification but wasn't able to get it to work.
        # See https://docs.docker.com/compose/compose-file/compose-file-v2/#volumes
        export VOLUME_PREFIX=""
        export BLANK_IF_TESTS=""
    fi
else
    if [[ "$CMD" =~ ^(runserver|bash|shell)$ ]]; then
        echo "ERROR: $CMD is no longer supported."
        echo "Use ./scripts/run.sh runserver ..."
        exit 1
    else
        SERVICES="services"
        if [ -z "$CMD" ]; then
            CMD="help"
        fi
    fi

    XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
    if [ -n "$DOCKER_MACHINE_NAME" ]; then
        # docker toolbox: create dockerhq dir in virtualbox VM, but not on tmpfs
        DOCKER_DATA_HOME=/mnt/sda1/var/lib/dockerhq
        docker-machine ssh $DOCKER_MACHINE_NAME sudo mkdir -p $DOCKER_DATA_HOME
        KAFKA_ADVERTISED_HOST_NAME=$(docker-machine ip $DOCKER_MACHINE_NAME)
    else
        # docker on linux or docker for mac beta
        DOCKER_DATA_HOME=$XDG_DATA_HOME/dockerhq
        mkdir -p $DOCKER_DATA_HOME
        KAFKA_ADVERTISED_HOST_NAME=localhost
    fi

    export ES_CLUSTER_NAME="${ES_CLUSTER_NAME:-$(hostname)}"
    export COMPOSE_PROJECT_NAME=hqservice
    export VOLUME_PREFIX="$DOCKER_DATA_HOME/"
    export KAFKA_ADVERTISED_HOST_NAME="$KAFKA_ADVERTISED_HOST_NAME"
fi
export COMPOSE_FILE="docker/hq-compose.yml"

case $CMD in
    -h | --help | help | services | "")
        if [ "$COMPOSE_PROJECT_NAME" == "hqtest" ]; then
            usage hqtest
        else
            usage $@
        fi
        ;;
    teardown)
        TEARDOWN=yes
        shift
        CMD="down --rmi local -v"
        ;;
esac

if [ "$CMD" == "rebuild" ]; then
    if [ -z "$1" ]; then
        docker-compose down --rmi local
        docker-compose build
    else
        docker-compose stop "$@"
        docker-compose rm "$@"
        docker-compose build "$@"
    fi
else
    docker-compose $CMD "$@"
    if [ "$TEARDOWN" == "yes" ]; then
        if [ "$COMPOSE_PROJECT_NAME" == "hqservice" ]; then
            echo "THIS WILL DELETE ALL SERVICE DATA"
            read -p "Delete volumes? [yN] " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Volumes not deleted."
                exit
            fi
        fi
        docker volume rm \
            ${VOLUME_PREFIX}couchdb \
            ${VOLUME_PREFIX}elasticsearch2 \
            ${VOLUME_PREFIX}elasticsearch5 \
            ${VOLUME_PREFIX}kafka \
            ${VOLUME_PREFIX}lib \
            ${VOLUME_PREFIX}postgresql \
            ${VOLUME_PREFIX}redis \
            ${VOLUME_PREFIX}minio-conf \
            ${VOLUME_PREFIX}minio-data \
            ${VOLUME_PREFIX}zookeeper
    fi
fi
